@app.callback(Output('mongo-table', 'children'),
              [Input('interval_db', 'n_intervals')])

def populate_datatable(n_intervals):
    print(n_intervals)
    # Convert the Collection (table) date to a pandas DataFrame
    df = pd.DataFrame(list(collection.find()))
    #Drop the _id column generated automatically by Mongo
    df = df.iloc[:, 1:]
    print(df.head(20))

    return [
        dash_table.DataTable(
            id='my-table',
            columns=[{
                'name': x,
                'id': x,
            } for x in df.columns],
            data=df.to_dict('records'),
            editable=True,
            row_deletable=True,
            filter_action="native",
            filter_options={"case": "sensitive"},
            sort_action="native",  # give user capability to sort columns
            sort_mode="single",  # sort across 'multi' or 'single' columns
            page_current=0,  # page number that user is on
            page_size=12,  # number of rows visible per page
            style_cell={'textAlign': 'left', 'minWidth': '100px',
                        'width': '100px', 'maxWidth': '100px'},
            style_header={
                  'classNames': 'table table-striped table-sm'
            },
        )
    ]


@app.callback(
    Output('show-graphs', 'children'),
    Input('my-table', 'data')
)
def add_row(data):
    df_grpah = pd.DataFrame(data)
    fig_1 = make_subplots(specs=[[{"secondary_y": True}]])
    fig_1.add_trace(go.Scatter(x=df_grpah.date_time, y=df_grpah.humidity, name="humidity"), secondary_y=False)
    fig_1.add_trace(go.Scatter(x=df_grpah.date_time, y=df_grpah.soilmoisture, name="soilmoisture"),  secondary_y=True)
    fig_1.update_yaxes(secondary_y=False)
    fig_1.update_yaxes(secondary_y=True)

    
    fig_2 = px.line(df_grpah,x='date_time', y='temperature')
    return [
        html.Div(children=[dcc.Graph(figure=fig_1)], className="six columns"),
        html.Div(children=[dcc.Graph(figure=fig_2)], className="six columns")
    ]



class VideoCamera(object):
    def __init__(self):
        self.video = cv2.VideoCapture(0)
        self.video.set(cv2.CAP_PROP_FPS, 30.0)
        self.video.set(cv2.CAP_PROP_FOURCC, cv2.VideoWriter.fourcc('m','j','p','g'))
        self.video.set(cv2.CAP_PROP_FOURCC, cv2.VideoWriter.fourcc('M','J','P','G'))
        self.video.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
        self.video.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)

    def __del__(self):
        self.video.release()
        cv2.destroyAllWindows()

    def get_frame(self):
        retain, image = self.video.read()
        if retain:
            ret, jpeg = cv2.imencode('.jpg', image)
            return jpeg.tobytes()

def gen(camera):
    while True:
        frame = camera.get_frame()
        yield (b'--frame\r\n'
               b'Content-Type: image/jpeg\r\n\r\n' + frame + b'\r\n\r\n')
      

@server.route('/video_feed')
def video_feed():
      camera = VideoCamera()
      return Response(gen(camera), mimetype='multipart/x-mixed-replace; boundary=frame')


if __name__ == '__main__':
      print('all good')
      app.run_server(debug=False,port=8080,host='0.0.0.0')
      #app.run_server(debug=True)

